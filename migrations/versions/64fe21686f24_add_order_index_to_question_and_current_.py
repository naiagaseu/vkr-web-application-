"""Add order_index to Question and current_question_index to Test_session

Revision ID: 64fe21686f24
Revises: 11b8c619bc51
Create Date: 2025-05-22 01:00:49.966259

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.schema import UniqueConstraint # Убедимся, что UniqueConstraint импортирован

# revision identifiers, used by Alembic.
revision = '64fe21686f24'
down_revision = '11b8c619bc51'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Добавляем колонку order_index в questions ---
    # 1. Добавляем колонку как nullable=True сначала
    op.add_column('questions', sa.Column('order_index', sa.Integer(), nullable=True))

    # 2. Заполняем новую колонку для ВСЕХ СУЩЕСТВУЮЩИХ строк.
    # Простейший вариант - заполнить нулем. Если есть способ более корректно задать порядок
    # исходя из твоих данных или JSON, нужно его использовать. Но 0 для начала сработает
    # и позволит добавить NOT NULL.
    # Для вопросов, у которых не было order_index при загрузке load_initial_data,
    # мы присвоим им order_index = 0. ПРИ ПЕРЕЗАГРУЗКЕ ДАННЫХ load_initial_data скриптом
    # после применения этой миграции, НОВЫЕ вопросы получат правильные order_index из JSON.
    op.execute("UPDATE questions SET order_index = 0 WHERE order_index IS NULL;")

    # 3. Изменяем колонку на nullable=False и добавляем UniqueConstraint.
    # Делаем ALTER COLUMN вне batch_alter_table для nullable (может быть более надежно)
    # или в новом batch_alter_table. Важно, чтобы nullable=False установился ПОСЛЕ UPDATE.
    op.alter_column('questions', 'order_index',
                    nullable=False,
                    existing_type=sa.Integer(), # Явно указываем существующий тип
                    server_default=None # Убираем возможный server default
                   )
    # Добавляем уникальное ограничение после установки NOT NULL
    op.create_unique_constraint('_test_order_uc', 'questions', ['test_id', 'order_index'], schema=None)


    # --- Добавляем колонку current_question_index в test_session ---
    # 1. Добавляем колонку как nullable=True сначала
    op.add_column('test_session', sa.Column('current_question_index', sa.Integer(), nullable=True))

    # 2. Заполняем новую колонку для ВСЕХ СУЩЕСТВУЮЩИХ строк (сессий, созданных до этой миграции).
    # Они должны начинаться с первого вопроса (индекс 0).
    op.execute("UPDATE test_session SET current_question_index = 0 WHERE current_question_index IS NULL;")

    # 3. Изменяем колонку на nullable=False.
    op.alter_column('test_session', 'current_question_index',
                    nullable=False,
                    existing_type=sa.Integer(), # Явно указываем существующий тип
                    server_default=None # Убираем возможный server default
                   )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Откатываем колонку current_question_index в test_session ---
    with op.batch_alter_table('test_session', schema=None) as batch_op:
        batch_op.drop_column('current_question_index')

    # --- Откатываем колонку order_index в questions ---
    with op.batch_alter_table('questions', schema=None) as batch_op:
        # Сначала удаляем уникальное ограничение
        batch_op.drop_constraint('_test_order_uc', type_='unique')
        # Затем удаляем колонку
        batch_op.drop_column('order_index')


    # ### end Alembic commands ###
